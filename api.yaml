openapi: 3.0.0
info:
  description: This is a sample Employee server.
  version: 1.0.0
  title: Swagger Employee
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:3333'
    description: Dev Server
components:
  schemas:
    Employee:
      type: object
      properties:
        emplId:
          type: integer
          description: The Employee ID.
          example: 342103
        name:
          type: string
          description: The employee's name.
          example: Leanne Graham
        Org:
          type: string
          description: Employee's ORG
          example: TCS
    NewEmployee:
      type: object
      required:
          - emplId
          - name
      properties:        
        emplId:
          type: integer
          description: The Employee ID.
          example: 342103
          minimum: 100000          
        name:
          type: string
          description: The employee's name.
          example: Leanne Graham
        Org:
          type: string
          description: Employee's ORG
          example: TCS
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Employee
    description: Employee Grouping
paths:
  /api/v1/employee:
    get:
      summary: Retrieve a list of Employees.
      description: >-
        Retrieve a list of employees from static array. Can be used to populate
        a list of fake employees when prototyping or testing an API.
      tags:
        - Employee
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of employees.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
    post:
      summary: Create a Employee.
      tags:
        - Employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEmployee'
              required:
                - emplId
      responses:
        '201':
          description: A list of employees.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Bad request
    delete:
      summary: deletes an Employees
      description: >-
        Deletes an emloyee
      tags:
        - Employee
      parameters:
        - in: path
          name: org
          required: true
          description: Org of the user to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: A list of employees.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          description: "Bad Request"
        '404':
          description: "Employee Not Found"
  '/api/v1/employee/{org}':
    get:
      summary: Retrieve a list of Employees.
      description: >-
        Retrieve a list of employees from static array. Can be used to populate
        a list of fake employees when prototyping or testing an API.
      tags:
        - Employee
      parameters:
        - in: path
          name: org
          required: true
          description: Org of the user to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: A list of employees.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
  '/api/v1/employee/{emplId}':
    put:
      summary: Retrieve a list of Employees.
      description: >-
        Retrieve a list of employees from static array. Can be used to populate
        a list of fake employees when prototyping or testing an API.
      tags:
        - Employee
      parameters:
        - in: path
          name: emplId
          required: true
          description: Employee Id of the user to retrieve.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: A list of employees.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          description: "Bad Request"
        '404':
          description: "Employee Not Found"